@file:Suppress("unused")

package com.github.jakobteuber.eldamo.data

import io.github.oshai.kotlinlogging.KotlinLogging
import jakarta.xml.bind.annotation.XmlEnumValue

private val logger = KotlinLogging.logger {}

class LanguageAdapter : EnumAdapter<Language>(Language::class, Language.Unknown)

enum class Language {
    @XmlEnumValue("p") PrimitiveElvish,
    @XmlEnumValue("eq") EarlyQuenya,
    @XmlEnumValue("mq") MiddleQuenya,
    @XmlEnumValue("nq") NeoQuenya,
    @XmlEnumValue("s") Sindarin,
    @XmlEnumValue("t") Telerin,
    @XmlEnumValue("q") Quenya,
    @XmlEnumValue("ad") Adunaic,
    @XmlEnumValue("g") Gnomish,
    @XmlEnumValue("mp") MiddlePrimitiveElvish,
    @XmlEnumValue("en") EarlyNoldorin,
    @XmlEnumValue("aq") AncientQuenya,
    @XmlEnumValue("ilk") Ilkorin,
    @XmlEnumValue("ep") EarlyPrimitiveElvish,
    @XmlEnumValue("n") Noldorin,
    @XmlEnumValue("ns") NeoSindarin,
    @XmlEnumValue("kh") Khuzdul,
    @XmlEnumValue("dan") Danain,
    @XmlEnumValue("pad") PrimitiveAdunaic,
    @XmlEnumValue("bs") BlackSpeech,
    @XmlEnumValue("np") NeoPrimitiveElvish,
    @XmlEnumValue("os") OldSindarin,
    @XmlEnumValue("on") OldNoldorin,
    @XmlEnumValue("khx") KhuzdulExternal,
    @XmlEnumValue("et") EarlyTelerin,
    @XmlEnumValue("eas") Easterling,
    @XmlEnumValue("ed") Edainic,
    @XmlEnumValue("teng") Tengwar,
    @XmlEnumValue("roh") Rohanese,
    @XmlEnumValue("van") Vanyarin,
    @XmlEnumValue("norths") NorthSindarin,
    @XmlEnumValue("wes") Westron,
    @XmlEnumValue("eilk") EarlyIlkorin,
    @XmlEnumValue("mt") MiddleTelerin,
    @XmlEnumValue("wos") Woose,
    @XmlEnumValue("nan") Nandorin,
    @XmlEnumValue("un") Unknown,
    @XmlEnumValue("val") Valarin,
    @XmlEnumValue("at") AncientTelerin,
    @XmlEnumValue("av") Avarin,
    @XmlEnumValue("tal") Taliska,
    @XmlEnumValue("dun") Dunlending,
    @XmlEnumValue("cir") Cirth,
    @XmlEnumValue("lin") Lindarin,
    @XmlEnumValue("ent") Entish,
    @XmlEnumValue("sar") Sarati,
    @XmlEnumValue("lem") Lemberin,
    @XmlEnumValue("maq") MiddleAncientQuenya,
    @XmlEnumValue("bel") Beleriandic,
    @XmlEnumValue("dor") Doriathrin,
    @XmlEnumValue("fal") Falathrin,
    @XmlEnumValue("edan") EarlyDanian,
    @XmlEnumValue("lon") LateOldNoldorin,
    @XmlEnumValue("sol") Solosimpi,
    @XmlEnumValue("eon") EarlyOldNoldorin,
    @XmlEnumValue("ln") LateNoldorin,
    @XmlEnumValue("oss") Ossiriandic,
    ;
    companion object  {
        private val adapter = LanguageAdapter()
        fun fromXml(str: String) = adapter.unmarshal(str)!!
    }
}



class MarkAdapter : jakarta.xml.bind.annotation.adapters.XmlAdapter<String, List<Mark>>() {
    val marks = Mark.entries.sortedBy { it.encoding.length }

    override fun unmarshal(string: String): List<Mark> = buildList {
        var pos = 0
        while (pos < string.length) {
            val mark = marks.find { string.startsWith(it.encoding, startIndex = pos) }
            if (mark == null) {
                logger.error { "Trying to parse `$string`, no match at $pos (${string[pos]})" }
                break
            }
            pos += mark.encoding.length
            add(mark)
        }
    }

    override fun marshal(list: List<Mark>): String =
        list.joinToString { it.encoding }

}

enum class Mark(val encoding: String) {
    Neologism("!"),
    Archaic("†"),
    Reconstructed("#"),
    Deleted("-"),
    Wrong("**"),
    Unattested("*"),
    TolkienQuestionMark("‽"),
    Uncertain("?"),
    DeletedSection("|"),
    Updated("^"),
}

class PosAdapter : EnumAdapter<PartOfSpeech>(PartOfSpeech::class, PartOfSpeech.Unknown)

enum class PartOfSpeech {
    @XmlEnumValue("?") Unknown,
    @XmlEnumValue("adv") Adverb,
    @XmlEnumValue("adj") Adjective,
    @XmlEnumValue("affix") Affix,
    @XmlEnumValue("article") Article,
    @XmlEnumValue("cardinal") Cardinal,
    @XmlEnumValue("conj") Conjunction,
    @XmlEnumValue("collective-name") CollectiveName,
    @XmlEnumValue("collective-noun") CollectiveNoun,
    @XmlEnumValue("family-name") FamilyName,
    @XmlEnumValue("fem-name") FemininName,
    @XmlEnumValue("fraction") Fraction,
    @XmlEnumValue("grammar") Grammar,
    @XmlEnumValue("infix") Infix,
    @XmlEnumValue("interj") Interjection,
    @XmlEnumValue("masc-name") MasculineName,
    @XmlEnumValue("n") Noun,
    @XmlEnumValue("ordinal") Ordinal,
    @XmlEnumValue("particle") Particle,
    @XmlEnumValue("phoneme") Phoneme,
    @XmlEnumValue("phonetics") PhoneticsOverview,
    @XmlEnumValue("phonetic-group") PhoneticGroup,
    @XmlEnumValue("phonetic-rule") PhoneticRule,
    @XmlEnumValue("phrase") Phrase,
    @XmlEnumValue("place-name") PlaceName,
    @XmlEnumValue("pref") Prefix,
    @XmlEnumValue("prep") Preposition,
    @XmlEnumValue("pron") Pronoun,
    @XmlEnumValue("proper-name") ProperName,
    @XmlEnumValue("radical") Radical,
    @XmlEnumValue("root") Root,
    @XmlEnumValue("text") Text,
    @XmlEnumValue("suf") Suffix,
    @XmlEnumValue("vb") Verb,
}

class InflectionAdapter : EnumAdapter<Inflection>(Inflection::class, Inflection.Unknown)

enum class Inflection {
    @XmlEnumValue("?") Unknown,
    @XmlEnumValue("singular") Singular,
    @XmlEnumValue("dual") Dual,
    @XmlEnumValue("plural") Plural,
    @XmlEnumValue("partitive-plural") PartitivePlural,
    @XmlEnumValue("class-plural") ClassPlural,
    @XmlEnumValue("draft-dual") DraftDual,
    @XmlEnumValue("draft-plural") DraftPlural,
    @XmlEnumValue("infinitive") Infinitive,
    @XmlEnumValue("aorist") Aorist,
    @XmlEnumValue("present") Present,
    @XmlEnumValue("past") Past,
    @XmlEnumValue("strong-past") StrongPast,
    @XmlEnumValue("perfect") Perfect,
    @XmlEnumValue("strong-perfect") StrongPerfect,
    @XmlEnumValue("future") Future,
    @XmlEnumValue("gerund") Gerund,
    @XmlEnumValue("particular-infinitive") ParticularInfinitive,
    @XmlEnumValue("consuetudinal-past") ConsuetudinalPast,
    @XmlEnumValue("present-imperfect") PresentImperfect,
    @XmlEnumValue("present-perfect") PresentPerfect,
    @XmlEnumValue("past-continuous") PastContinuous,
    @XmlEnumValue("past-imperfect") PastImperfect,
    @XmlEnumValue("past-perfect") PastPerfect,
    @XmlEnumValue("past-future") PastFuture,
    @XmlEnumValue("past-future-perfect") PastFuturePerfect,
    @XmlEnumValue("long-perfect") LongPerfect,
    @XmlEnumValue("pluperfect") Pluperfect,
    @XmlEnumValue("future-imperfect") FutureImperfect,
    @XmlEnumValue("future-perfect") FuturePerfect,
    @XmlEnumValue("future-future") FutureFuture,
    @XmlEnumValue("continuative-present") ContinuativePresent,
    @XmlEnumValue("continuative-past") ContinuativePast,
    @XmlEnumValue("draft-perfect") DraftPerfect,
    @XmlEnumValue("stative") Stative,
    @XmlEnumValue("stative-past") StativePast,
    @XmlEnumValue("stative-future") StativeFuture,
    @XmlEnumValue("conditional") Conditional,
    @XmlEnumValue("imperative") Imperative,
    @XmlEnumValue("suffixed-imperative") SuffixedImperative,
    @XmlEnumValue("subjunctive") Subjunctive,
    @XmlEnumValue("past-subjunctive") PastSubjunctive,
    @XmlEnumValue("present-subjective") PresentSubjective,
    @XmlEnumValue("impersonal") Impersonal,
    @XmlEnumValue("passive") Passive,
    @XmlEnumValue("passive-past") PassivePast,
    @XmlEnumValue("reflexive") Reflexive,
    @XmlEnumValue("active-participle") ActiveParticiple,
    @XmlEnumValue("passive-participle") PassiveParticiple,
    @XmlEnumValue("imperfect-participle") ImperfectParticiple,
    @XmlEnumValue("imperfect-passive-participle") ImperfectPassiveParticiple,
    @XmlEnumValue("perfect-participle") PerfectParticiple,
    @XmlEnumValue("perfect-passive-participle") PerfectPassiveParticiple,
    @XmlEnumValue("perfective-participle") PerfectiveParticiple,
    @XmlEnumValue("future-participle") FutureParticiple,
    @XmlEnumValue("future-passive-participle") FuturePassiveParticiple,
    @XmlEnumValue("reflexive-participle") ReflexiveParticiple,
    @XmlEnumValue("1st-sg") FirstSg,
    @XmlEnumValue("1st-dual-exclusive") FirstDualExclusive,
    @XmlEnumValue("1st-dual-inclusive") FirstDualInclusive,
    @XmlEnumValue("1st-pl") FirstPl,
    @XmlEnumValue("1st-pl-exclusive") FirstPlExclusive,
    @XmlEnumValue("1st-pl-inclusive") FirstPlInclusive,
    @XmlEnumValue("2nd-sg") SecondSg,
    @XmlEnumValue("2nd-sg-familiar") SecondSgFamiliar,
    @XmlEnumValue("2nd-sg-polite") SecondSgPolite,
    @XmlEnumValue("2nd-sg-honorific") SecondSgHonorific,
    @XmlEnumValue("2nd-dual") SecondDual,
    @XmlEnumValue("2nd-dual-polite") SecondDualPolite,
    @XmlEnumValue("2nd-dual-honorific") SecondDualHonorific,
    @XmlEnumValue("2nd-pl") SecondPl,
    @XmlEnumValue("2nd-pl-polite") SecondPlPolite,
    @XmlEnumValue("2nd-pl-honorific") SecondPlHonorific,
    @XmlEnumValue("3rd-sg") ThirdSg,
    @XmlEnumValue("3rd-sg-fem") ThirdSgFem,
    @XmlEnumValue("3rd-sg-masc") ThirdSgMasc,
    @XmlEnumValue("3rd-sg-neut") ThirdSgNeut,
    @XmlEnumValue("3rd-sg-reflexive") ThirdSgReflexive,
    @XmlEnumValue("3rd-dual") ThirdDual,
    @XmlEnumValue("3rd-dual-fem") ThirdDualFem,
    @XmlEnumValue("3rd-dual-masc") ThirdDualMasc,
    @XmlEnumValue("3rd-dual-neut") ThirdDualNeut,
    @XmlEnumValue("3rd-dual-reflexive") ThirdDualReflexive,
    @XmlEnumValue("3rd-pl") ThirdPl,
    @XmlEnumValue("3rd-pl-fem") ThirdPlFem,
    @XmlEnumValue("3rd-pl-masc") ThirdPlMasc,
    @XmlEnumValue("3rd-pl-neut") ThirdPlNeut,
    @XmlEnumValue("3rd-pl-reflexive") ThirdPlReflexive,
    @XmlEnumValue("with-sg-object") WithSgObject,
    @XmlEnumValue("with-dual-object") WithDualObject,
    @XmlEnumValue("with-pl-object") WithPlObject,
    @XmlEnumValue("with-remote-sg-object") WithRemoteSgObject,
    @XmlEnumValue("with-remote-pl-object") WithRemotePlObject,
    @XmlEnumValue("with-1st-sg-object") WithFirstSgObject,
    @XmlEnumValue("with-1st-pl-object") WithFirstPlObject,
    @XmlEnumValue("with-1st-pl-exclusive-object") WithFirstPlExclusiveObject,
    @XmlEnumValue("with-1st-pl-inclusive-object") WithFirstPlInclusiveObject,
    @XmlEnumValue("with-2nd-sg-object") WithSecondSgObject,
    @XmlEnumValue("with-2nd-pl-object") WithSecondPlObject,
    @XmlEnumValue("with-1st-sg-dative") WithFirstSgDative,
    @XmlEnumValue("with-masc-object") WithMascObject,
    @XmlEnumValue("with-3rd-sg-remote-object") WithThirdSgRemoteObject,
    @XmlEnumValue("with-3rd-pl-remote-object") WithThirdPlRemoteObject,
    @XmlEnumValue("with-3rd-sg-neuter-object") WithThirdSgNeuterObject,
    @XmlEnumValue("with-3rd-pl-neuter-object") WithThirdPlNeuterObject,
    @XmlEnumValue("with-2nd-sg-familiar-object") WithSecondSgFamiliarObject,
    @XmlEnumValue("with-2nd-pl-familiar-object") WithSecondPlFamiliarObject,
    @XmlEnumValue("with-2nd-sg-polite-object") WithSecondSgPoliteObject,
    @XmlEnumValue("with-2nd-pl-polite-object") WithSecondPlPoliteObject,
    @XmlEnumValue("with-1st-dual-exclusive-object") WithFirstDualExclusiveObject,
    @XmlEnumValue("with-1st-dual-inclusive-object") WithFirstDualInclusiveObject,
    @XmlEnumValue("with-2nd-dual-familiar-object") WithSecondDualFamiliarObject,
    @XmlEnumValue("with-2nd-dual-polite-object") WithSecondDualPoliteObject,
    @XmlEnumValue("with-3rd-dual-remote-object") WithThirdDualRemoteObject,
    @XmlEnumValue("with-3rd-dual-neuter-object") WithThirdDualNeuterObject,
    @XmlEnumValue("with-abstract-object") WithAbstractObject,
    @XmlEnumValue("1st-sg-prep") FirstSgPrep,
    @XmlEnumValue("1st-dual-prep") FirstDualPrep,
    @XmlEnumValue("1st-pl-exclusive-prep") FirstPlExclusivePrep,
    @XmlEnumValue("1st-pl-inclusive-prep") FirstPlInclusivePrep,
    @XmlEnumValue("2nd-sg-prep") SecondSgPrep,
    @XmlEnumValue("2nd-sg-familiar-prep") SecondSgFamiliarPrep,
    @XmlEnumValue("2nd-sg-polite-prep") SecondSgPolitePrep,
    @XmlEnumValue("2nd-pl-prep") SecondPlPrep,
    @XmlEnumValue("3rd-sg-prep") ThirdSgPrep,
    @XmlEnumValue("3rd-sg-inanimate-prep") ThirdSgInanimatePrep,
    @XmlEnumValue("3rd-sg-honorific-prep") ThirdSgHonorificPrep,
    @XmlEnumValue("3rd-pl-inanimate-prep") ThirdPlInanimatePrep,
    @XmlEnumValue("3rd-pl-prep") ThirdPlPrep,
    @XmlEnumValue("3rd-pl-honorific-prep") ThirdPlHonorificPrep,
    @XmlEnumValue("definite-prep") DefinitePrep,
    @XmlEnumValue("definite-plural-prep") DefinitePluralPrep,
    @XmlEnumValue("1st-sg-poss") FirstSgPoss,
    @XmlEnumValue("1st-pl-exclusive-poss") FirstPlExclusivePoss,
    @XmlEnumValue("1st-pl-inclusive-poss") FirstPlInclusivePoss,
    @XmlEnumValue("2nd-sg-polite-poss") SecondSgPolitePoss,
    @XmlEnumValue("2nd-sg-familiar-poss") SecondSgFamiliarPoss,
    @XmlEnumValue("2nd-dual-poss") SecondDualPoss,
    @XmlEnumValue("2nd-pl-poss") SecondPlPoss,
    @XmlEnumValue("3rd-sg-poss") ThirdSgPoss,
    @XmlEnumValue("3rd-pl-poss") ThirdPlPoss,
    @XmlEnumValue("accusative") Accusative,
    @XmlEnumValue("ablative") Ablative,
    @XmlEnumValue("allative") Allative,
    @XmlEnumValue("dative") Dative,
    @XmlEnumValue("genitive") Genitive,
    @XmlEnumValue("instrumental") Instrumental,
    @XmlEnumValue("locative") Locative,
    @XmlEnumValue("short-locative") ShortLocative,
    @XmlEnumValue("nominative") Nominative,
    @XmlEnumValue("possessive") Possessive,
    @XmlEnumValue("possessive-adjectival") PossessiveAdjectival,
    @XmlEnumValue("s-case") SCase,
    @XmlEnumValue("old-genitive") OldGenitive,
    @XmlEnumValue("comitative") Comitative,
    @XmlEnumValue("similative") Similative,
    @XmlEnumValue("partitive") Partitive,
    @XmlEnumValue("objective") Objective,
    @XmlEnumValue("subjective") Subjective,
    @XmlEnumValue("agental-formation") AgentalFormation,
    @XmlEnumValue("draft-dative") DraftDative,
    @XmlEnumValue("draft-genitive") DraftGenitive,
    @XmlEnumValue("draft-instrumental") DraftInstrumental,
    @XmlEnumValue("draft-subjective") DraftSubjective,
    @XmlEnumValue("augmentative") Augmentative,
    @XmlEnumValue("comparative") Comparative,
    @XmlEnumValue("diminutive") Diminutive,
    @XmlEnumValue("intensive") Intensive,
    @XmlEnumValue("superlative") Superlative,
    @XmlEnumValue("diminutive-superlative") DiminutiveSuperlative,
    @XmlEnumValue("fem") Fem,
    @XmlEnumValue("masc") Masc,
    @XmlEnumValue("neut") Neut,
    @XmlEnumValue("soft-mutation") SoftMutation,
    @XmlEnumValue("nasal-mutation") NasalMutation,
    @XmlEnumValue("liquid-mutation") LiquidMutation,
    @XmlEnumValue("stop-mutation") StopMutation,
    @XmlEnumValue("mixed-mutation") MixedMutation,
    @XmlEnumValue("sibilant-mutation") SibilantMutation,
    @XmlEnumValue("i-mutation") IMutation,
    @XmlEnumValue("a-fortification") AFortification,
    @XmlEnumValue("augmentation") Augmentation,
    @XmlEnumValue("consonant-doubling") ConsonantDoubling,
    @XmlEnumValue("extension") Extension,
    @XmlEnumValue("full-form") FullForm,
    @XmlEnumValue("inversion") Inversion,
    @XmlEnumValue("nasal-infixion") NasalInfixion,
    @XmlEnumValue("nasal-prefixion") NasalPrefixion,
    @XmlEnumValue("s-fortification") SFortification,
    @XmlEnumValue("strengthened") Strengthened,
    @XmlEnumValue("subordinate-vowel-variation") SubordinateVowelVariation,
    @XmlEnumValue("vocalic-extension") VocalicExtension,
    @XmlEnumValue("vowel-lengthening") VowelLengthening,
    @XmlEnumValue("vowel-prefixion") VowelPrefixion,
    @XmlEnumValue("vowel-suffixion") VowelSuffixion,
    @XmlEnumValue("vowel-suppression") VowelSuppression,
    @XmlEnumValue("stem") Stem,
    @XmlEnumValue("assimilated") Assimilated,
    @XmlEnumValue("elided") Elided,
    @XmlEnumValue("shortened") Shortened,
    @XmlEnumValue("negated") Negated,
    @XmlEnumValue("definite") Definite,
    @XmlEnumValue("indefinite") Indefinite,
    @XmlEnumValue("affix") Affix,
    @XmlEnumValue("prefix") Prefix,
    @XmlEnumValue("suffix") Suffix,
    @XmlEnumValue("patronymic") Patronymic,
    @XmlEnumValue("adjectival") Adjectival,
    @XmlEnumValue("adverbial") Adverbial,
    @XmlEnumValue("frequentative") Frequentative,
    @XmlEnumValue("radical") Radical,
    @XmlEnumValue("complete") Complete,
    @XmlEnumValue("glide-consonant") GlideConsonant,
    @XmlEnumValue("negative-quasi-participle") NegativeQuasiParticiple,
    @XmlEnumValue("negative") Negative,
    @XmlEnumValue("root") Root,
    @XmlEnumValue("no-agreement") NoAgreement,
    @XmlEnumValue("agental") Agental,
}

class InfectionVariantAdapter : EnumAdapter<InfectionVariant>(InfectionVariant::class, InfectionVariant.Unknown)

enum class InfectionVariant {
    @XmlEnumValue("unknown") Unknown,
    @XmlEnumValue("b-mutation") BMutation,
    @XmlEnumValue("c-mutation") CMutation,
    @XmlEnumValue("cw-mutation") CwMutation,
    @XmlEnumValue("d-mutation") DMutation,
    @XmlEnumValue("dy-mutation") DyMutation,
    @XmlEnumValue("g-mutation") GMutation,
    @XmlEnumValue("gl-mutation") GlMutation,
    @XmlEnumValue("gr-mutation") GrMutation,
    @XmlEnumValue("gw-mutation") GwMutation,
    @XmlEnumValue("h-mutation") HMutation,
    @XmlEnumValue("lh-mutation") LhMutation,
    @XmlEnumValue("m-mutation") MMutation,
    @XmlEnumValue("mb-mutation") MbMutation,
    @XmlEnumValue("nd-mutation") NdMutation,
    @XmlEnumValue("ng-mutation") NgMutation,
    @XmlEnumValue("p-mutation") PMutation,
    @XmlEnumValue("rh-mutation") RhMutation,
    @XmlEnumValue("s-mutation") SMutation,
    @XmlEnumValue("t-mutation") TMutation,
    @XmlEnumValue("w-mutation") WMutation,
    @XmlEnumValue("wh-mutation") WhMutation,
    @XmlEnumValue("declension-A") DeclensionA,
    @XmlEnumValue("declension-B") DeclensionB,
    @XmlEnumValue("declension-C") DeclensionC,
    @XmlEnumValue("declension-D") DeclensionD,
    @XmlEnumValue("fem") Fem,
    @XmlEnumValue("masc") Masc,
    @XmlEnumValue("neut") Neut,
    @XmlEnumValue("a-genitive") AGenitive,
    @XmlEnumValue("adj-agreement") AdjAgreement,
    @XmlEnumValue("adjectival") Adjectival,
    @XmlEnumValue("adjective-in-objective") AdjectiveInObjective,
    @XmlEnumValue("archaic-objective-with-glide") ArchaicObjectiveWithGlide,
    @XmlEnumValue("archaic-strong-dual") ArchaicStrongDual,
    @XmlEnumValue("archaic-dual-with-glide") ArchaicDualWithGlide,
    @XmlEnumValue("archaic-strong-objective") ArchaicStrongObjective,
    @XmlEnumValue("archaic-strong-plural") ArchaicStrongPlural,
    @XmlEnumValue("archaic-strong-subjective") ArchaicStrongSubjective,
    @XmlEnumValue("assimilated") Assimilated,
    @XmlEnumValue("augmentless") Augmentless,
    @XmlEnumValue("bare-stem") BareStem,
    @XmlEnumValue("colloquial-possessive") ColloquialPossessive,
    @XmlEnumValue("dialectical") Dialectical,
    @XmlEnumValue("draft") Draft,
    @XmlEnumValue("er-plural") ErPlural,
    @XmlEnumValue("half-strong-past") HalfStrongPast,
    @XmlEnumValue("infixed-imperative") InfixedImperative,
    @XmlEnumValue("irregular") Irregular,
    @XmlEnumValue("irregular-dual") IrregularDual,
    @XmlEnumValue("irregular-plural") IrregularPlural,
    @XmlEnumValue("irregular-subjective") IrregularSubjective,
    @XmlEnumValue("joining-base-vowel") JoiningBaseVowel,
    @XmlEnumValue("long-dative") LongDative,
    @XmlEnumValue("long-imperfect") LongImperfect,
    @XmlEnumValue("n-accusative") NAccusative,
    @XmlEnumValue("na-dative") NaDative,
    @XmlEnumValue("no-agreement") NoAgreement,
    @XmlEnumValue("o-genitive") OGenitive,
    @XmlEnumValue("normal-and-subjective") NormalAndSubjective,
    @XmlEnumValue("object-suffix-only") ObjectSuffixOnly,
    @XmlEnumValue("objective-with-syncope") ObjectiveWithSyncope,
    @XmlEnumValue("plural-with-linking-consonant") PluralWithLinkingConsonant,
    @XmlEnumValue("possessive-second") PossessiveSecond,
    @XmlEnumValue("pronoun-prefix") PronounPrefix,
    @XmlEnumValue("prosodic-lengthening") ProsodicLengthening,
    @XmlEnumValue("r-locative") RLocative,
    @XmlEnumValue("reformed-perfect") ReformedPerfect,
    @XmlEnumValue("short-instrumental") ShortInstrumental,
    @XmlEnumValue("strong-I-without-syncope") StrongIWithoutSyncope,
    @XmlEnumValue("strong-past") StrongPast,
    @XmlEnumValue("strong-perfect") StrongPerfect,
    @XmlEnumValue("suffixed-imperative") SuffixedImperative,
    @XmlEnumValue("u-dual") UDual,
    @XmlEnumValue("weak-past") WeakPast,
    @XmlEnumValue("weak-perfect") WeakPerfect,
}

class WordClassAdapter :
    EnumAdapter<WordClassForm>(WordClassForm::class, WordClassForm.Unknown)

enum class WordClassForm {
    @XmlEnumValue("?") Unknown,
    @XmlEnumValue("strong-I") StrongI,
    @XmlEnumValue("strong-II") StrongII,
    @XmlEnumValue("weak-I") WeakI,
    @XmlEnumValue("weak-II") WeakII,
    @XmlEnumValue("neut") Neut,
    @XmlEnumValue("gendered") Gendered,
    @XmlEnumValue("biconsonantal-verb") BiconsonantalVerb,
    @XmlEnumValue("triconsonantal-verb") TriconsonantalVerb,
    @XmlEnumValue("derived-verb") DerivedVerb,
    @XmlEnumValue("uniconsonantal-form") UniconsonantalForm,
    @XmlEnumValue("biconsonantal-root") BiconsonantalRoot,
    @XmlEnumValue("triconsonantal-root") TriconsonantalRoot,
    @XmlEnumValue("a-verb") AVerb,
    @XmlEnumValue("basic-verb") BasicVerb,
    @XmlEnumValue("irregular-verb") IrregularVerb,
    @XmlEnumValue("na-formative") NaFormative,
    @XmlEnumValue("non-verb-derived") NonVerbDerived,
    @XmlEnumValue("ta-causative") TaCausative,
    @XmlEnumValue("ta-formative") TaFormative,
    @XmlEnumValue("talat-stem") TalatStem,
    @XmlEnumValue("u-verb") UVerb,
    @XmlEnumValue("weak-verb") WeakVerb,
    @XmlEnumValue("ya-causative") YaCausative,
    @XmlEnumValue("ya-formative") YaFormative,
}

class WordClassVariantAdapter :
    EnumAdapter<WordClassVariant>(WordClassVariant::class, WordClassVariant.Common)

enum class WordClassVariant {
    @XmlEnumValue("masc") Masculine,
    @XmlEnumValue("fem") Feminine,
    @XmlEnumValue("common") Common,
}

class SourceTypeAdapter : EnumAdapter<SourceType>(SourceType::class, SourceType.Work)

enum class SourceType {
    @XmlEnumValue("adunaic") Adunaic,
    @XmlEnumValue("appendix") Appendix,
    @XmlEnumValue("index") Index,
    @XmlEnumValue("minor") Minor,
    @XmlEnumValue("minor-work") MinorWork,
    @XmlEnumValue("neologisms") Neologisms,
    @XmlEnumValue("quenya") Quenya,
    @XmlEnumValue("secondary") Secondary,
    @XmlEnumValue("sindarin") Sindarin,
    @XmlEnumValue("telerin") Telerin,
    @XmlEnumValue("work") Work,
}
